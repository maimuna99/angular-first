{"ast":null,"code":"export {};","map":{"version":3,"names":[],"sources":["/Users/maimunawahaibi/Desktop/angular-first/src/app/services/store.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { ajax } from 'rxjs/ajax';\nimport { Observable, BehaviorSubject, map } from 'rxjs';\nimport { Product } from '../interfaces/product.interface';\nimport { scan } from 'rxjs/operators';\nimport { interface }\n@Injectable({\n  providedIn: 'root',\n})\nexport class StoreService {\n  private cartItemsSubject = new BehaviorSubject<Product[]>([]);\n\n  //never expose subjects directly -> use observable\n  cartItems$ = this.cartItemsSubject.asObservable();\n  producst$ = ajax.getJSON<Product[]>('/assets/data.json');\n\n  total$ = this.cartItems$.pipe(\n    map((products) => products.reduce((acc, product) => acc + product.price, 0))\n  );\n  // addItemToCart(product: Product): void {\n  //   this.cartItemsSubject.next([...this.cartItemsSubject.getValue(), product]);\n  // }\n  // removeItemFromCart(product: Product): void {\n  //   const currentItems = this.cartItemsSubject.getValue();\n  //   const itemIndex = currentItems.findIndex((item) => item.id === product.id);\n\n  //   if (itemIndex > -1) {\n  //     const updatedItems = [...currentItems];\n  //     updatedItems.splice(itemIndex, 1);\n  //     this.cartItemsSubject.next(updatedItems);\n  //   }\n  // }\n\n  addItemToCart(product: Product): void {\n    const currentItems = this.cartItemsSubject.getValue();\n    const itemIndex = currentItems.findIndex(\n      (item) => item.product.id === product.id\n    );\n\n    if (itemIndex > -1) {\n      const updatedItems = [...currentItems];\n      updatedItems[itemIndex].quantity++;\n      this.cartItemsSubject.next(updatedItems);\n    } else {\n      const newItem: CartItem = { product, quantity: 1 };\n      const updatedItems = [...currentItems, newItem];\n      this.cartItemsSubject.next(updatedItems);\n    }\n  }\n\n  removeItemFromCart(product: Product): void {\n    const currentItems = this.cartItemsSubject.getValue();\n    const itemIndex = currentItems.findIndex(\n      (item) => item.product.id === product.id\n    );\n\n    if (itemIndex > -1) {\n      const updatedItems = [...currentItems];\n      if (updatedItems[itemIndex].quantity > 1) {\n        updatedItems[itemIndex].quantity--;\n      } else {\n        updatedItems.splice(itemIndex, 1);\n      }\n      this.cartItemsSubject.next(updatedItems);\n    }\n  }\n}\n"],"mappings":""},"metadata":{},"sourceType":"module","externalDependencies":[]}